use crate::instructions::*;
use crate::opcode::Opcode;
use crate::state::State;

/// Selects the correct Instruction for a given Opcode
pub fn instruction(op: &dyn Opcode) -> fn(&dyn Opcode, &State, [u8; 16]) -> State {
    match op.nibbles() {
        (0x0, 0x0, 0xE, 0x0) => clr,
        (0x0, 0x0, 0xE, 0xE) => rts,
        (0x1, ..) => jump,
        (0x2, ..) => call,
        (0x3, ..) => ske,
        (0x4, ..) => skne,
        (0x5, .., 0x0) => skre,
        (0x6, ..) => load,
        (0x7, ..) => add,
        (0x8, .., 0x0) => mv,
        (0x8, .., 0x1) => or,
        (0x8, .., 0x2) => and,
        (0x8, .., 0x3) => xor,
        (0x8, .., 0x4) => addr,
        (0x8, .., 0x5) => sub,
        (0x8, .., 0x6) => shr,
        (0x8, .., 0x7) => subn,
        (0x8, .., 0xE) => shl,
        (0x9, .., 0x0) => skrne,
        (0xA, ..) => loadi,
        (0xB, ..) => jumpi,
        (0xC, ..) => rand,
        (0xD, ..) => draw,
        (0xE, .., 0x9, 0xE) => skpr,
        (0xE, .., 0xA, 0x1) => skup,
        (0xF, .., 0x0, 0x7) => moved,
        (0xF, .., 0x0, 0xA) => keyd,
        (0xF, .., 0x1, 0x5) => loads,
        (0xF, .., 0x1, 0x8) => ld,
        (0xF, .., 0x1, 0xE) => addi,
        (0xF, .., 0x2, 0x9) => ldspr,
        (0xF, .., 0x3, 0x3) => bcd,
        (0xF, .., 0x5, 0x5) => stor,
        (0xF, .., 0x6, 0x5) => read,
        other => panic!("Opcode {:?} is not implemented", other),
    }
}
